{
  
    
        "post0": {
            "title": "Assignment 3",
            "content": "Assignment 3 . Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . df = pd.read_csv(&#39;./classics.csv&#39;) . print(&quot;Rows: &quot;, len(df)) print(&quot;Columns: &quot;, len(df.iloc[0])) . Rows: 1006 Columns: 38 . Data Exploration . for c in df.columns: print(c) . bibliography.congress classifications bibliography.languages bibliography.subjects bibliography.title bibliography.type metadata.downloads metadata.id metadata.rank metadata.url bibliography.author.birth bibliography.author.death bibliography.author.name bibliography.publication.day bibliography.publication.full bibliography.publication.month bibliography.publication.month name bibliography.publication.year metadata.formats.total metadata.formats.types metrics.difficulty.automated readability index metrics.difficulty.coleman liau index metrics.difficulty.dale chall readability score metrics.difficulty.difficult words metrics.difficulty.flesch kincaid grade metrics.difficulty.flesch reading ease metrics.difficulty.gunning fog metrics.difficulty.linsear write formula metrics.difficulty.smog index metrics.sentiments.polarity metrics.sentiments.subjectivity metrics.statistics.average letter per word metrics.statistics.average sentence length metrics.statistics.average sentence per word metrics.statistics.characters metrics.statistics.polysyllables metrics.statistics.sentences metrics.statistics.syllables metrics.statistics.words . df.dtypes . bibliography.congress classifications object bibliography.languages object bibliography.subjects object bibliography.title object bibliography.type object metadata.downloads int64 metadata.id int64 metadata.rank int64 metadata.url object bibliography.author.birth int64 bibliography.author.death int64 bibliography.author.name object bibliography.publication.day int64 bibliography.publication.full object bibliography.publication.month int64 bibliography.publication.month name object bibliography.publication.year int64 metadata.formats.total int64 metadata.formats.types object metrics.difficulty.automated readability index float64 metrics.difficulty.coleman liau index float64 metrics.difficulty.dale chall readability score float64 metrics.difficulty.difficult words int64 metrics.difficulty.flesch kincaid grade float64 metrics.difficulty.flesch reading ease float64 metrics.difficulty.gunning fog float64 metrics.difficulty.linsear write formula float64 metrics.difficulty.smog index float64 metrics.sentiments.polarity float64 metrics.sentiments.subjectivity float64 metrics.statistics.average letter per word float64 metrics.statistics.average sentence length float64 metrics.statistics.average sentence per word float64 metrics.statistics.characters int64 metrics.statistics.polysyllables int64 metrics.statistics.sentences int64 metrics.statistics.syllables float64 metrics.statistics.words int64 dtype: object . df.head(2) . bibliography.congress classifications bibliography.languages bibliography.subjects bibliography.title bibliography.type metadata.downloads metadata.id metadata.rank metadata.url bibliography.author.birth ... metrics.sentiments.polarity metrics.sentiments.subjectivity metrics.statistics.average letter per word metrics.statistics.average sentence length metrics.statistics.average sentence per word metrics.statistics.characters metrics.statistics.polysyllables metrics.statistics.sentences metrics.statistics.syllables metrics.statistics.words . 0 PR | en | Sisters -- Fiction,Courtship -- Fiction,Social... | Pride and Prejudice | Text | 36576 | 1342 | 1 | https://www.gutenberg.org/ebooks/1342 | 1775 | ... | 0.136713 | 0.522239 | 4.83 | 18.0 | 0.05 | 586794 | 4603 | 6511 | 170648.1 | 121533 | . 1 PS | en | Mentally ill women -- Fiction,Feminist fiction... | The Yellow Wallpaper | Text | 26363 | 1952 | 2 | https://www.gutenberg.org/ebooks/1952 | 1860 | ... | 0.054174 | 0.534787 | 4.41 | 15.0 | 0.06 | 26769 | 102 | 385 | 7686.9 | 6067 | . 2 rows × 38 columns . df.iloc[len(df)-2:] . bibliography.congress classifications bibliography.languages bibliography.subjects bibliography.title bibliography.type metadata.downloads metadata.id metadata.rank metadata.url bibliography.author.birth ... metrics.sentiments.polarity metrics.sentiments.subjectivity metrics.statistics.average letter per word metrics.statistics.average sentence length metrics.statistics.average sentence per word metrics.statistics.characters metrics.statistics.polysyllables metrics.statistics.sentences metrics.statistics.syllables metrics.statistics.words . 1004 NaN | en | NaN | Church History (Volumes 1-3) | Text | 0 | 51491 | 1005 | https://www.gutenberg.org/ebooks/51491 | 1809 | ... | 0.112242 | 0.440014 | 5.31 | 17.0 | 0.06 | 3883244 | 46730 | 41950 | 1083170.7 | 730715 | . 1005 NaN | en | NaN | The Uncensored Letters of a Canteen Girl | Text | 0 | 51495 | 1006 | https://www.gutenberg.org/ebooks/51495 | 0 | ... | 0.059623 | 0.435443 | 4.73 | 17.0 | 0.06 | 451687 | 2595 | 5580 | 130093.2 | 95496 | . 2 rows × 38 columns . df.describe() . metadata.downloads metadata.id metadata.rank bibliography.author.birth bibliography.author.death bibliography.publication.day bibliography.publication.month bibliography.publication.year metadata.formats.total metrics.difficulty.automated readability index ... metrics.sentiments.polarity metrics.sentiments.subjectivity metrics.statistics.average letter per word metrics.statistics.average sentence length metrics.statistics.average sentence per word metrics.statistics.characters metrics.statistics.polysyllables metrics.statistics.sentences metrics.statistics.syllables metrics.statistics.words . count 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | ... | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1006.000000 | 1.006000e+03 | 1006.000000 | 1006.000000 | 1.006000e+03 | 1.006000e+03 | . mean 1431.373757 | 16512.391650 | 503.500000 | 1414.925447 | 1468.493042 | 10.481113 | 5.237575 | 1998.528827 | 7.380716 | 12.349602 | ... | 0.100743 | 0.492111 | 4.911352 | 20.801193 | 0.054135 | 5.131198e+05 | 3641.756461 | 5422.240557 | 1.442273e+05 | 1.032993e+05 | . std 2361.420502 | 18336.804181 | 290.551487 | 773.309251 | 790.256414 | 9.668492 | 3.330280 | 53.117673 | 1.009007 | 5.560579 | ... | 0.060870 | 0.052681 | 0.351216 | 10.740644 | 0.020521 | 1.073475e+06 | 11589.776231 | 17278.210403 | 2.832135e+05 | 1.948256e+05 | . min 0.000000 | 1.000000 | 1.000000 | -750.000000 | -650.000000 | 1.000000 | 1.000000 | 1422.000000 | 3.000000 | 4.900000 | ... | -0.256731 | 0.066667 | 4.170000 | 5.000000 | 0.000000 | 2.890000e+02 | 0.000000 | 6.000000 | 9.000000e-01 | 3.200000e+01 | . 25% 533.000000 | 1262.000000 | 252.250000 | 1564.000000 | 1616.000000 | 1.000000 | 2.000000 | 2003.000000 | 7.000000 | 9.200000 | ... | 0.070816 | 0.469743 | 4.710000 | 15.000000 | 0.040000 | 1.247205e+05 | 488.250000 | 1284.000000 | 3.396532e+04 | 2.551275e+04 | . 50% 758.500000 | 8134.000000 | 503.500000 | 1821.000000 | 1885.000000 | 8.000000 | 4.000000 | 2006.000000 | 7.000000 | 11.400000 | ... | 0.097218 | 0.494603 | 4.865000 | 19.000000 | 0.050000 | 3.146885e+05 | 1715.000000 | 3161.500000 | 8.950950e+04 | 6.502050e+04 | . 75% 1308.000000 | 28978.000000 | 754.750000 | 1862.000000 | 1930.000000 | 18.000000 | 8.000000 | 2010.000000 | 8.000000 | 14.300000 | ... | 0.127219 | 0.514309 | 5.030000 | 24.000000 | 0.060000 | 6.004268e+05 | 3915.250000 | 5822.750000 | 1.689797e+05 | 1.214575e+05 | . max 36576.000000 | 51495.000000 | 1006.000000 | 1941.000000 | 2014.000000 | 31.000000 | 12.000000 | 2016.000000 | 12.000000 | 125.100000 | ... | 0.733333 | 1.000000 | 9.030000 | 235.000000 | 0.190000 | 2.502970e+07 | 250291.000000 | 443390.000000 | 6.532614e+06 | 4.462031e+06 | . 8 rows × 28 columns . df[&#39;metadata.downloads&#39;] . 0 36576 1 26363 2 18882 3 17128 4 15683 ... 1001 0 1002 0 1003 0 1004 0 1005 0 Name: metadata.downloads, Length: 1006, dtype: int64 . Line plot . df[&#39;metadata.downloads&#39;].plot.line() . &lt;AxesSubplot:&gt; . df.loc[0:9,&#39;metadata.downloads&#39;] . 0 36576 1 26363 2 18882 3 17128 4 15683 5 15347 6 13638 7 13237 8 12794 9 11625 Name: metadata.downloads, dtype: int64 . # as well as the matching 10 elements of a different column that has interesting text df[[&#39;metadata.downloads&#39;,&#39;bibliography.title&#39;]].loc[0:9] . metadata.downloads bibliography.title . 0 36576 | Pride and Prejudice | . 1 26363 | The Yellow Wallpaper | . 2 18882 | Alice&#39;s Adventures in Wonderland | . 3 17128 | Frankenstein; Or, The Modern Prometheus | . 4 15683 | Metamorphosis | . 5 15347 | Adventures of Huckleberry Finn | . 6 13638 | The Importance of Being Earnest: A Trivial Com... | . 7 13237 | The Adventures of Tom Sawyer | . 8 12794 | Narrative of the Life of Frederick Douglass, a... | . 9 11625 | A Doll&#39;s House : a play | . Bar Plot . # and make a bar plot with the text values horizontally and the numeric values as the bar heights dftop10 = df[[&#39;metadata.downloads&#39;,&#39;bibliography.title&#39;]].loc[0:9] dftop10.plot.bar(x=&#39;bibliography.title&#39;, y=&#39;metadata.downloads&#39;) . &lt;AxesSubplot:xlabel=&#39;bibliography.title&#39;&gt; . Horizontal Bar plot . dftop10.plot.barh(x=&#39;bibliography.title&#39;, y=&#39;metadata.downloads&#39;) . &lt;AxesSubplot:ylabel=&#39;bibliography.title&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) dftop10.plot.barh(x=&#39;bibliography.title&#39;, y=&#39;metadata.downloads&#39;, color=&#39;orange&#39;, title=&#39;Book title to downloads&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Book title to downloads&#39;}, ylabel=&#39;bibliography.title&#39;&gt; . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . grouped = df.groupby(&#39;bibliography.languages&#39;).count() #dfnewlabels = pd.DataFrame({ &#39;count&#39;: grouped[&#39;bibliography.title&#39;]}, index=grouped[&#39;bibliography.languages&#39;]) grouped.plot( y=&#39;bibliography.title&#39;, kind=&#39;area&#39;, figsize =(15,15)) . &lt;AxesSubplot:xlabel=&#39;bibliography.languages&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . def calcpercent(num, denom): #function (new function definition) percent = num/denom*100 return str(round(percent, 2))+&quot;%&quot; num_engbooks = len(df.loc[df[&#39;bibliography.languages&#39;]==&#39;en&#39;]) total_books = len(df) print(&quot;Percent of classic books that are English is&quot;, calcpercent(num_engbooks,total_books)) #mathematical operation + execution of that function) . Percent of classic books that are English is 95.92% . grouped_mean = df.groupby(&#39;bibliography.languages&#39;).mean() grouped_mean . metadata.downloads metadata.id metadata.rank bibliography.author.birth bibliography.author.death bibliography.publication.day bibliography.publication.month bibliography.publication.year metadata.formats.total metrics.difficulty.automated readability index ... metrics.sentiments.polarity metrics.sentiments.subjectivity metrics.statistics.average letter per word metrics.statistics.average sentence length metrics.statistics.average sentence per word metrics.statistics.characters metrics.statistics.polysyllables metrics.statistics.sentences metrics.statistics.syllables metrics.statistics.words . bibliography.languages . de 908.111111 | 21772.111111 | 551.722222 | 1840.277778 | 1914.555556 | 12.333333 | 5.166667 | 1994.444444 | 7.333333 | 13.322222 | ... | 0.288148 | 0.586273 | 5.606111 | 16.055556 | 0.064444 | 2.905789e+05 | 1561.944444 | 3211.000000 | 7.318585e+04 | 5.246133e+04 | . en 1456.088083 | 16328.939896 | 499.608290 | 1410.025907 | 1465.302591 | 10.451813 | 5.223834 | 1998.412435 | 7.388601 | 12.261347 | ... | 0.097174 | 0.489251 | 4.886933 | 20.854922 | 0.053907 | 5.054731e+05 | 3451.837306 | 5243.136788 | 1.426023e+05 | 1.026631e+05 | . en,enm 669.000000 | 14568.000000 | 578.000000 | 0.000000 | 0.000000 | 3.000000 | 1.000000 | 2005.000000 | 9.000000 | 12.300000 | ... | 0.187958 | 0.500317 | 4.620000 | 24.000000 | 0.040000 | 1.815200e+05 | 150.000000 | 1635.000000 | 4.980420e+04 | 3.928100e+04 | . en,es 539.000000 | 15353.000000 | 740.000000 | 1880.000000 | 0.000000 | 13.000000 | 3.000000 | 2005.000000 | 8.000000 | 10.500000 | ... | 0.060725 | 0.538613 | 5.710000 | 10.000000 | 0.100000 | 2.254770e+05 | 2517.000000 | 3905.000000 | 6.308190e+04 | 3.950600e+04 | . enm 1176.000000 | 22120.000000 | 287.000000 | 1342.000000 | 1400.000000 | 22.000000 | 7.000000 | 2007.000000 | 7.000000 | 10.600000 | ... | 0.184973 | 0.548843 | 4.570000 | 21.000000 | 0.050000 | 1.091798e+06 | 1824.000000 | 11379.000000 | 2.874825e+05 | 2.390840e+05 | . es 1080.000000 | 17309.000000 | 492.666667 | 1142.666667 | 1191.333333 | 3.333333 | 6.666667 | 2005.666667 | 7.333333 | 21.233333 | ... | 0.055328 | 0.527471 | 5.043333 | 37.000000 | 0.033333 | 9.727133e+05 | 11876.333333 | 4942.000000 | 3.253173e+05 | 2.035553e+05 | . fr 486.428571 | 25028.428571 | 836.428571 | 1299.428571 | 1346.428571 | 12.571429 | 5.285714 | 2008.142857 | 7.285714 | 15.300000 | ... | 0.157886 | 0.638256 | 5.258571 | 23.571429 | 0.047143 | 3.817100e+05 | 1376.142857 | 3740.428571 | 1.018218e+05 | 7.296129e+04 | . it 417.000000 | 1012.000000 | 960.000000 | 1265.000000 | 1321.000000 | 1.000000 | 8.000000 | 1997.000000 | 5.000000 | 14.800000 | ... | 0.046847 | 0.513458 | 4.800000 | 27.000000 | 0.040000 | 4.691300e+05 | 2371.000000 | 3577.000000 | 1.452582e+05 | 9.775400e+04 | . la 1149.500000 | 14230.000000 | 570.000000 | 786.000000 | 854.000000 | 2.500000 | 3.500000 | 2008.500000 | 8.000000 | 17.700000 | ... | 0.128009 | 0.436878 | 6.065000 | 20.500000 | 0.045000 | 5.516275e+05 | 8683.500000 | 4291.000000 | 1.701117e+05 | 9.207700e+04 | . nl 539.000000 | 36077.000000 | 742.000000 | 1840.000000 | 1916.000000 | 10.000000 | 5.000000 | 2011.000000 | 6.000000 | 15.800000 | ... | 0.008956 | 0.134836 | 5.770000 | 20.000000 | 0.050000 | 1.074571e+06 | 10432.000000 | 9257.000000 | 2.862198e+05 | 1.862860e+05 | . pt 1277.000000 | 31552.000000 | 265.000000 | 1846.000000 | 1925.000000 | 2.000000 | 4.000000 | 2010.000000 | 7.000000 | 14.500000 | ... | -0.025251 | 0.590080 | 6.870000 | 7.000000 | 0.140000 | 1.205168e+07 | 201302.000000 | 243657.000000 | 2.952951e+06 | 1.753991e+06 | . ru 496.000000 | 16527.000000 | 811.000000 | 1836.000000 | 1902.000000 | 14.000000 | 8.000000 | 2005.000000 | 7.000000 | 4.900000 | ... | 0.250000 | 1.000000 | 4.700000 | 8.000000 | 0.120000 | 1.269300e+05 | 0.000000 | 3209.000000 | 9.000000e-01 | 2.703000e+04 | . tl 1108.500000 | 17336.500000 | 403.000000 | 1377.500000 | 1413.500000 | 17.000000 | 8.750000 | 2005.250000 | 6.250000 | 15.525000 | ... | 0.036644 | 0.408491 | 5.727500 | 19.500000 | 0.055000 | 3.180395e+05 | 5811.000000 | 2784.750000 | 8.759947e+04 | 5.409750e+04 | . 13 rows × 28 columns . grouped_mean.plot.bar(y=&#39;metrics.statistics.average sentence length&#39;, title=&#39;Language vs Average sentence length&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Language vs Average sentence length&#39;}, xlabel=&#39;bibliography.languages&#39;&gt; . Avg sentence length vs langauge: . It seems like there are a lot of varied sentence lengths based on language. This makes sense as some languages naturally lean towards having long sentences. From this graph you can see that the mean sentence length is the longest for Spanish (es), and English, the language I speak, is around the mean of sentence length (±20 words per sentence.). The shortest words per sentence are Portuguese and Russian. . grouped_mean.plot.bar(y=&#39;metrics.difficulty.automated readability index&#39;, title=&#39;Language vs Average Readability Index&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Language vs Average Readability Index&#39;}, xlabel=&#39;bibliography.languages&#39;&gt; . Avg readability vs langauge: . Similar to sentence length, the readability index is also varied, but less so than sentence length. From the documentation (https://corgis-edu.github.io/corgis/csv/classics/) &quot;The Automated Readability Index is a number indicating the understandability of the text. This number is an approximate US Grade Level needed to comprehend the text, calculated using the characters per word and words per sentences.&quot;. Knowing that it makes sense that Spanish has the highest difficulty, seeing as its average sentence length is so high. But suprisingly, Portuguese is of higher difficulty, despite being one of the languages with the shortest average sentence length. This must mean that there are more characters per word. . grouped_mean.plot.bar(y=&#39;metrics.statistics.average letter per word&#39;, title=&#39;Language vs Average letters per word&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Language vs Average letters per word&#39;}, xlabel=&#39;bibliography.languages&#39;&gt; . Avg letters per word vs langauge: . As predicted in my readability analysis below, Portuguese does have a higher average number of letters per word, which probably contributes to its high automated readability index in light of its low word per sentence stat. In comparison, the average letter per word has the least variation of the other statistics, possibly because it is hard for all humans to pronounce very long words due to needing to breathe. You get a break between sentences, so they can carry on for longer, explaining the high variation in sentence length, but words cannot physically be that long without having the word be broken up by a breath. .",
            "url": "https://cindyrzheng.github.io/dh140-fastpages/fastpages/jupyter/2022/03/06/Classics.html",
            "relUrl": "/fastpages/jupyter/2022/03/06/Classics.html",
            "date": " • Mar 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cindyrzheng.github.io/dh140-fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cindyrzheng.github.io/dh140-fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cindyrzheng.github.io/dh140-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cindyrzheng.github.io/dh140-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}